{"version":3,"sources":["scripts/Ship.js","components/Grid.js","components/GameboardComp.js","scripts/Player.js","scripts/Gameboard.js","scripts/Initialize.js","sounds/hitSFX.mp3","Gameloop.js","index.js"],"names":["module","exports","length","sunk","shipHits","isSunk","hit","Grid","props","useState","value","setValue","useEffect","className","onClick","y","x","onMouseOver","event","target","style","backgroundColor","onMouseOut","computerOrHuman","GameboardComp","gameboard","display","setDisplay","displayFormatted","map","row","rowIndex","col","colIndex","type","name","Player","isHuman","computerAttack","enemyBoard","errorMessage","Math","floor","random","receiveAttack","humanAttack","attack","Ship","require","_","Gameboard","shipsArray","numOfSunkShips","gameMessage","boardSpaces","Array","placeShips","shipLength","orientation","myShip","push","tempBoardSpaces","cloneDeep","i","getBoardSpaces","forEach","ship","getMessage","Initialize","playerBoard","computerBoard","humanPlayer","computerPlayer","Gameloop","gameInstructions","setGameInstructions","gameOver","setGameOver","playerBoardState","setPlayerBoardState","computerBoardState","setComputerBoardState","playerMessage","setPlayerMessage","computerMessage","setComputerMessage","userShipsLeftToPlace","setUserShipsLeftToPlace","setOrientation","useSound","hitsSFX","volume","hitSFX","undefined","filter","userPlaceShips","temp1","temp2","handleClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd16a410.chunk.js","sourcesContent":["const Ship = (length) => {\n  let sunk = false;\n  let shipHits = 0;\n\n  const hit = () => {\n    if (!sunk) {\n      shipHits++;\n      if (shipHits === length) sunk = true;\n    }\n  };\n  const isSunk = () => {\n    return sunk;\n  };\n  return { isSunk, hit, length };\n};\n\nmodule.exports = Ship;\n","import React, { useState, useEffect } from \"react\";\nimport \"../styles/Grid.css\";\n\nconst Grid = (props) => {\n  const [value, setValue] = useState(props.value);\n  useEffect(() => {\n    setValue(props.value);\n  }, [props]);\n\n  return (\n    <div\n      className={`grid${value}`}\n      //passes these coordinates all the way up to gameloop to use in handleClick fn\n      onClick={() => {\n        props.onClick(props.y, props.x);\n      }}\n      onMouseOver={(event) => (event.target.style.backgroundColor = \"green\")}\n      onMouseOut={(event) => (event.target.style.backgroundColor = \"\")}\n    >\n      <span className={`${props.computerOrHuman}${value}`}></span>\n    </div>\n  );\n};\n\nexport default Grid;\n","import React, { useEffect, useState } from \"react\";\nimport \"../styles/GameboardComp.css\";\nimport Grid from \"./Grid\";\n\nconst GameboardComp = (props) => {\n  const [display, setDisplay] = useState(props.gameboard);\n\n  useEffect(() => {\n    setDisplay(props.gameboard);\n  }, [props.gameboard]);\n\n  const displayFormatted = display.map((row, rowIndex) => {\n    return (\n      <div key={rowIndex} className=\"row\">\n        {row.map((col, colIndex) => {\n          return (\n            <div key={colIndex} className=\"col\">\n              {\n                <Grid\n                  onClick={(y, x) => props.onClick(y, x)}\n                  y={rowIndex}\n                  x={colIndex}\n                  value={col}\n                  computerOrHuman={props.type}\n                />\n              }\n            </div>\n          );\n        })}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"gameboard-container\">\n      <h2>{props.name}</h2>\n      <div className=\"gameboard\">{displayFormatted}</div>\n    </div>\n  );\n};\n\nexport default GameboardComp;\n","const Player = (isHuman = \"true\") => {\n  //really need to optimize this AI since it is just attacking random spots\n  const computerAttack = (enemyBoard) => {\n    let y;\n    let x;\n    let errorMessage;\n    do {\n      y = Math.floor(Math.random() * 10);\n      x = Math.floor(Math.random() * 10);\n      errorMessage = enemyBoard.receiveAttack(y, x);\n    } while (errorMessage === \"Error!\");\n  };\n\n  const humanAttack = (enemyBoard, y, x) => {\n    enemyBoard.receiveAttack(y, x);\n  };\n\n  const attack = (enemyBoard, y, x) => {\n    if (isHuman) {\n      humanAttack(enemyBoard, y, x);\n    } else {\n      computerAttack(enemyBoard);\n    }\n  };\n  return { attack, isHuman };\n};\n\nexport { Player };\n","const Ship = require(\"../scripts/Ship\");\nvar _ = require(\"lodash\");\n\nconst Gameboard = () => {\n  const shipsArray = [];\n  let numOfSunkShips = 0;\n  let gameMessage = \"\";\n\n  let boardSpaces = new Array(10);\n  for (let row = 0; row < 10; row++) {\n    boardSpaces[row] = new Array(10);\n    for (let col = 0; col < 10; col++) {\n      boardSpaces[row][col] = 0;\n    }\n  }\n\n  const placeShips = (shipLength, orientation, y, x) => {\n    const myShip = Ship(shipLength);\n    shipsArray.push(myShip);\n    let tempBoardSpaces = _.cloneDeep(boardSpaces); //clone\n    for (let i = 0; i < shipLength; i++) {\n      if (orientation === \"Vertical\") {\n        //check to see if there is a ship there or if the ship will go off the board\n        if (tempBoardSpaces[y + i][x] === 0 && y + shipLength < 11) {\n          tempBoardSpaces[y + i][x] = shipLength;\n        } else return \"Error! Can't place ship there!\";\n      } else {\n        if (tempBoardSpaces[y][x + i] === 0 && x + shipLength < 11) {\n          tempBoardSpaces[y][x + i] = shipLength;\n        } else return \"Error! Can't place ship there!\";\n      }\n    }\n    boardSpaces = _.cloneDeep(tempBoardSpaces);\n  };\n\n  const receiveAttack = (y, x) => {\n    if (\n      boardSpaces[y][x] !== 0 &&\n      boardSpaces[y][x] !== \"X\" &&\n      boardSpaces[y][x] !== 1\n    ) {\n      shipsArray.forEach((ship) => {\n        if (ship.length === boardSpaces[y][x]) {\n          boardSpaces[y][x] = \"X\";\n          ship.hit();\n          gameMessage = \"Hit!\";\n          if (ship.isSunk() === true) {\n            numOfSunkShips++;\n            gameMessage = \"Hit and Sunk!\";\n            if (numOfSunkShips === 5) {\n              gameMessage = \"Hit and Sunk! You've sunk all my ships!\";\n            }\n          }\n        }\n      });\n    } else if (boardSpaces[y][x] === 0) {\n      boardSpaces[y][x] = 1;\n      gameMessage = \"Miss!\";\n    } else {\n      //boardspace === X\n      return \"Error!\";\n    }\n  };\n\n  const getMessage = () => {\n    return gameMessage;\n  };\n\n  const getBoardSpaces = () => {\n    return boardSpaces;\n  };\n\n  return { placeShips, getBoardSpaces, receiveAttack, getMessage };\n};\n\nexport { Gameboard };\n","import { Player } from \"./Player\";\nimport { Gameboard } from \"./Gameboard\";\n\nconst Initialize = () => {\n  const playerBoard = Gameboard();\n  const computerBoard = Gameboard();\n  const humanPlayer = Player(true);\n  const computerPlayer = Player(false);\n  computerBoard.placeShips(2, \"Vertical\", 2, 4);\n  computerBoard.placeShips(3, \"horiz\", 0, 5);\n  computerBoard.placeShips(4, \"horiz\", 8, 1);\n  computerBoard.placeShips(5, \"Vertical\", 1, 1);\n  computerBoard.placeShips(6, \"Vertical\", 2, 9);\n\n  return [playerBoard, computerBoard, humanPlayer, computerPlayer];\n};\n\nexport default Initialize;\n","export default __webpack_public_path__ + \"static/media/hitSFX.e8b6d110.mp3\";","import \"./Gameloop.css\";\nimport GameboardComp from \"./components/GameboardComp\";\nimport React, { useState, useEffect } from \"react\";\nimport Initialize from \"./scripts/Initialize\";\nimport hitsSFX from \"./sounds/hitSFX.mp3\";\nimport useSound from \"use-sound\";\nvar _ = require(\"lodash\");\n\nconst [playerBoard, computerBoard, humanPlayer, computerPlayer] = Initialize();\n\nfunction Gameloop() {\n  useEffect(() => {\n    const [\n      playerBoard,\n      computerBoard,\n      humanPlayer,\n      computerPlayer,\n    ] = Initialize();\n  }, []);\n\n  const [gameInstructions, setGameInstructions] = useState(\n    \"Welcome to BattleShip! Start by placing your ships. \" +\n      \"You will have 5 ships to place, starting with a 6 unit \" +\n      \"Carrier to a 2 unit Destroyer. You can set the orientation \" +\n      \"with the Orientation toggle button\"\n  );\n\n  const [gameOver, setGameOver] = useState(false);\n\n  //Board states\n  const [playerBoardState, setPlayerBoardState] = useState(\n    playerBoard.getBoardSpaces()\n  );\n  const [computerBoardState, setComputerBoardState] = useState(\n    computerBoard.getBoardSpaces()\n  );\n\n  //Player Message States\n  const [playerMessage, setPlayerMessage] = useState(playerBoard.getMessage());\n  const [computerMessage, setComputerMessage] = useState(\n    computerBoard.getMessage()\n  );\n\n  const [userShipsLeftToPlace, setUserShipsLeftToPlace] = useState([\n    6,\n    5,\n    4,\n    3,\n    2,\n  ]);\n\n  const [orientation, setOrientation] = useState(\"Vertical\");\n\n  const [hitSFX] = useSound(hitsSFX, { volume: 0.05 });\n\n  const userPlaceShips = (y, x) => {\n    if (\n      playerBoard.placeShips(userShipsLeftToPlace[0], orientation, y, x) ===\n      undefined\n    ) {\n      /* removes first of array so essentially after user place the 6 length Ship\n   it will automatically leave the 5 length ship to place on next click */\n\n      setUserShipsLeftToPlace(userShipsLeftToPlace.filter((x, i) => i !== 0));\n      setPlayerBoardState(_.cloneDeep(playerBoard.getBoardSpaces()));\n\n      //clear the current error message if there was one\n      setPlayerMessage(\"\");\n      if (userShipsLeftToPlace[0] === 2) {\n        setGameInstructions(\n          \"USA goes first! Choose locations on the enemy \" +\n            \"board to attack. First player to sink all 5 enemy ships wins glory \" +\n            \"to powerful nation and gains much valor!\"\n        );\n      }\n    } else setPlayerMessage(\"Glorious nation can't put ship there!\");\n  };\n\n  const toggleOrientation = () => {\n    if (orientation === \"Vertical\") {\n      setOrientation(\"Horizontal\");\n    } else setOrientation(\"Vertical\");\n  };\n\n  //main game loop is here. Updates player click and message and executes computer click\n  const handleClick = (y, x) => {\n    //check if user has placed all available ships\n    if (userShipsLeftToPlace[0] === undefined && gameOver === false) {\n      humanPlayer.attack(computerBoard, y, x);\n\n      //sound effect played if hit\n      if (computerBoard.getMessage() !== \"Miss!\") {\n        hitSFX();\n      }\n\n      //pass by reference wont update the state to rerender if we dont deep clone\n      const temp1 = _.cloneDeep(computerBoard.getBoardSpaces());\n      setComputerBoardState(temp1);\n      setComputerMessage(computerBoard.getMessage());\n\n      computerPlayer.attack(playerBoard);\n\n      //sound effect played if hit\n      if (playerBoard.getMessage() !== \"Miss!\") {\n        hitSFX();\n      }\n      //pass by reference wont update the state to rerender if we dont deep clone\n      const temp2 = _.cloneDeep(playerBoard.getBoardSpaces());\n      setPlayerBoardState(temp2);\n      setPlayerMessage(playerBoard.getMessage());\n\n      if (\n        computerBoard.getMessage() === \"Hit and Sunk! You've sunk all my ships!\"\n      ) {\n        setGameOver(true);\n        setGameInstructions(\n          \"Game over! Glory to all great nation of US and A!\"\n        );\n      }\n      if (\n        playerBoard.getMessage() === \"Hit and Sunk! You've sunk all my ships!\"\n      ) {\n        setGameOver(true);\n        setGameInstructions(\"Game over! Glory to all great nation of USSR!\");\n      }\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>BATTLESHIP</h1>\n      <div className=\"instructions\">{gameInstructions}</div>\n      <div className=\"gameboards-container\">\n        <div className=\"player-container\">\n          <GameboardComp\n            onClick={(y, x) => {\n              userPlaceShips(y, x);\n            }}\n            gameboard={playerBoardState}\n            name=\"USA\"\n            type=\"human\"\n          />\n          <div className=\"Message\">{playerMessage}</div>\n          {userShipsLeftToPlace[0] === undefined || (\n            <button onClick={toggleOrientation}>{orientation}</button>\n          )}\n        </div>\n        <div className=\"computer-container\">\n          <GameboardComp\n            onClick={(y, x) => handleClick(y, x)}\n            gameboard={computerBoardState}\n            name=\"USSR\"\n            type=\"computer\"\n          />\n          <div className=\"Message\">{computerMessage}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Gameloop;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Gameloop from \"./Gameloop\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Gameloop />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}