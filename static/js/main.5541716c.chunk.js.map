{"version":3,"sources":["scripts/Ship.js","components/Grid.js","components/GameboardComp.js","scripts/Gameboard.js","scripts/Player.js","Gameloop.js","index.js"],"names":["module","exports","length","sunk","shipHits","isSunk","hit","Grid","props","useState","value","setValue","useEffect","className","onClick","y","x","computerOrHuman","GameboardComp","gameboard","display","setDisplay","displayFormatted","map","row","rowIndex","col","colIndex","type","name","Ship","require","Gameboard","shipsArray","numOfSunkShips","gameMessage","boardSpaces","Array","placeShips","shipLength","orientation","myShip","push","i","getBoardSpaces","receiveAttack","forEach","ship","getMessage","Player","isHuman","computerAttack","enemyBoard","errorMessage","Math","floor","random","humanAttack","attack","_","playerBoard","computerBoard","humanPlayer","computerPlayer","Gameloop","playerBoardState","setPlayerBoardState","computerBoardState","setComputerBoardState","playerMessage","setPlayerMessage","computerMessage","setComputerMessage","temp","cloneDeep","handleClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5541716c.chunk.js","sourcesContent":["const Ship = (length) => {\n  let sunk = false;\n  let shipHits = 0;\n\n  const hit = () => {\n    if (!sunk) {\n      shipHits++;\n      if (shipHits === length) sunk = true;\n    }\n  };\n  const isSunk = () => {\n    return sunk;\n  };\n  return { isSunk, hit, length };\n};\n\nmodule.exports = Ship;\n","import React, { useState, useEffect } from \"react\";\nimport \"../styles/Grid.css\";\n\nconst Grid = (props) => {\n  const [value, setValue] = useState(props.value);\n  useEffect(() => {\n    setValue(props.value);\n  }, [props]);\n  return (\n    <div\n      className={`grid${value}`}\n      onClick={() => props.onClick(props.y, props.x)}\n    >\n      <span className={`${props.computerOrHuman}${value}`}></span>\n    </div>\n  );\n};\n\nexport default Grid;\n","import React, { useEffect, useState } from \"react\";\nimport \"../styles/GameboardComp.css\";\nimport Grid from \"./Grid\";\n\nconst GameboardComp = (props) => {\n  const [display, setDisplay] = useState(props.gameboard);\n\n  useEffect(() => {\n    setDisplay(props.gameboard);\n  }, [props.gameboard]);\n\n  const displayFormatted = display.map((row, rowIndex) => {\n    return (\n      <div key={rowIndex} className=\"row\">\n        {row.map((col, colIndex) => {\n          return (\n            <div key={colIndex} className=\"col\">\n              {\n                <Grid\n                  onClick={(y, x) => props.onClick(y, x)}\n                  y={rowIndex}\n                  x={colIndex}\n                  value={col}\n                  computerOrHuman={props.type}\n                />\n              }\n            </div>\n          );\n        })}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"gameboard-container\">\n      {props.name}\n      <div className=\"gameboard\">{displayFormatted}</div>\n    </div>\n  );\n};\n\nexport default GameboardComp;\n","const Ship = require(\"../scripts/Ship\");\n\nconst Gameboard = () => {\n  const shipsArray = [];\n  let numOfSunkShips = 0;\n  let gameMessage = \"\";\n\n  const boardSpaces = new Array(10);\n  for (let row = 0; row < 10; row++) {\n    boardSpaces[row] = new Array(10);\n    for (let col = 0; col < 10; col++) {\n      boardSpaces[row][col] = 0;\n    }\n  }\n\n  const placeShips = (shipLength, orientation, y, x) => {\n    const myShip = Ship(shipLength);\n    shipsArray.push(myShip);\n    for (let i = 0; i < shipLength; i++) {\n      if (orientation === \"vert\") {\n        boardSpaces[y + i][x] = shipLength;\n      } else {\n        boardSpaces[y][x + i] = shipLength;\n      }\n    }\n  };\n\n  const receiveAttack = (y, x) => {\n    if (\n      boardSpaces[y][x] !== 0 &&\n      boardSpaces[y][x] !== \"X\" &&\n      boardSpaces[y][x] !== 1\n    ) {\n      shipsArray.forEach((ship) => {\n        if (ship.length === boardSpaces[y][x]) {\n          boardSpaces[y][x] = \"X\";\n          ship.hit();\n          gameMessage = \"Hit!\";\n          if (ship.isSunk() === true) {\n            numOfSunkShips++;\n            gameMessage = \"Hit and Sunk!\";\n            if (numOfSunkShips === 5) {\n              gameMessage = \"Hit and Sunk! You've sunk all my ships!\";\n            }\n          }\n        }\n      });\n    } else if (boardSpaces[y][x] === 0) {\n      boardSpaces[y][x] = 1;\n      gameMessage = \"Miss!\";\n    } else {\n      //boardspace === X\n      return \"Error!\";\n    }\n  };\n\n  const getMessage = () => {\n    return gameMessage;\n  };\n\n  const getBoardSpaces = () => {\n    return boardSpaces;\n  };\n\n  return { placeShips, getBoardSpaces, receiveAttack, getMessage };\n};\n\nexport { Gameboard };\n","const Player = (isHuman = \"true\") => {\n  const computerAttack = (enemyBoard) => {\n    let y;\n    let x;\n    let errorMessage;\n    do {\n      y = Math.floor(Math.random() * 10);\n      x = Math.floor(Math.random() * 10);\n      errorMessage = enemyBoard.receiveAttack(y, x);\n    } while (errorMessage === \"Error!\");\n  };\n\n  const humanAttack = (enemyBoard, y, x) => {\n    enemyBoard.receiveAttack(y, x);\n  };\n\n  const attack = (enemyBoard, y, x) => {\n    if (isHuman) {\n      humanAttack(enemyBoard, y, x);\n    } else {\n      computerAttack(enemyBoard);\n    }\n  };\n  return { attack, isHuman };\n};\n\nexport { Player };\n","import \"./Gameloop.css\";\nimport GameboardComp from \"./components/GameboardComp\";\nimport { Gameboard } from \"./scripts/Gameboard\";\nimport { Player } from \"./scripts/Player\";\nimport React, { useState } from \"react\";\nvar _ = require(\"lodash\");\n\nconst playerBoard = Gameboard();\nconst computerBoard = Gameboard();\nconst humanPlayer = Player(true);\nconst computerPlayer = Player(false);\ncomputerBoard.placeShips(2, \"vert\", 2, 4);\ncomputerBoard.placeShips(3, \"horiz\", 0, 5);\ncomputerBoard.placeShips(4, \"horiz\", 8, 1);\ncomputerBoard.placeShips(5, \"vert\", 1, 1);\ncomputerBoard.placeShips(6, \"vert\", 2, 9);\n\nplayerBoard.placeShips(2, \"horiz\", 1, 1);\nplayerBoard.placeShips(3, \"vert\", 6, 4);\nplayerBoard.placeShips(4, \"vert\", 2, 6);\nplayerBoard.placeShips(5, \"horiz\", 4, 0);\nplayerBoard.placeShips(6, \"vert\", 2, 8);\n\nfunction Gameloop() {\n  const [playerBoardState, setPlayerBoardState] = useState(\n    playerBoard.getBoardSpaces()\n  );\n  const [computerBoardState, setComputerBoardState] = useState(\n    computerBoard.getBoardSpaces()\n  );\n\n  const [playerMessage, setPlayerMessage] = useState(playerBoard.getMessage());\n  const [computerMessage, setComputerMessage] = useState(\n    computerBoard.getMessage()\n  );\n\n  const handleClick = (y, x) => {\n    humanPlayer.attack(computerBoard, y, x);\n    //pass by reference wont update the state to rerender if we dont deep clone\n    const temp = _.cloneDeep(computerBoard.getBoardSpaces());\n    setComputerBoardState(temp);\n    setComputerMessage(computerBoard.getMessage());\n    computerPlayer.attack(playerBoard);\n    setPlayerBoardState(_.cloneDeep(playerBoard.getBoardSpaces()));\n    setPlayerMessage(playerBoard.getMessage());\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"player-container\">\n        <GameboardComp\n          onClick={() => {}}\n          gameboard={playerBoardState}\n          name=\"Player 1\"\n          type=\"human\"\n        />\n        <div className=\"Message\">{playerMessage}</div>\n      </div>\n      <div className=\"computer-container\">\n        <GameboardComp\n          onClick={(y, x) => handleClick(y, x)}\n          gameboard={computerBoardState}\n          name=\"USSR\"\n          type=\"computer\"\n        />\n        <div className=\"Message\">{computerMessage}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default Gameloop;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Gameloop from \"./Gameloop\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Gameloop />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}