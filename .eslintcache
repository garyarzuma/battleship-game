[{"/home/garyarzumanyan/Documents/Odin/battleship-game/src/index.js":"1","/home/garyarzumanyan/Documents/Odin/battleship-game/src/components/GameboardComp.js":"2","/home/garyarzumanyan/Documents/Odin/battleship-game/src/scripts/Gameboard.js":"3","/home/garyarzumanyan/Documents/Odin/battleship-game/src/scripts/Ship.js":"4","/home/garyarzumanyan/Documents/Odin/battleship-game/src/components/Grid.js":"5","/home/garyarzumanyan/Documents/Odin/battleship-game/src/scripts/Player.js":"6","/home/garyarzumanyan/Documents/Odin/battleship-game/src/Gameloop.js":"7","/home/garyarzumanyan/Documents/Odin/battleship-game/src/scripts/Initialize.js":"8"},{"size":234,"mtime":1612250325668,"results":"9","hashOfConfig":"10"},{"size":1044,"mtime":1612422664254,"results":"11","hashOfConfig":"10"},{"size":2055,"mtime":1612415116864,"results":"12","hashOfConfig":"10"},{"size":288,"mtime":1612166552788,"results":"13","hashOfConfig":"10"},{"size":592,"mtime":1612410031814,"results":"14","hashOfConfig":"10"},{"size":615,"mtime":1612249512128,"results":"15","hashOfConfig":"10"},{"size":4729,"mtime":1612423109844,"results":"16","hashOfConfig":"10"},{"size":591,"mtime":1612415933994,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"vv7eyp",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/home/garyarzumanyan/Documents/Odin/battleship-game/src/index.js",[],["37","38"],"/home/garyarzumanyan/Documents/Odin/battleship-game/src/components/GameboardComp.js",[],"/home/garyarzumanyan/Documents/Odin/battleship-game/src/scripts/Gameboard.js",[],"/home/garyarzumanyan/Documents/Odin/battleship-game/src/scripts/Ship.js",[],["39","40"],"/home/garyarzumanyan/Documents/Odin/battleship-game/src/components/Grid.js",[],"/home/garyarzumanyan/Documents/Odin/battleship-game/src/scripts/Player.js",[],"/home/garyarzumanyan/Documents/Odin/battleship-game/src/Gameloop.js",["41","42","43","44"],"import \"./Gameloop.css\";\nimport GameboardComp from \"./components/GameboardComp\";\nimport React, { useState, useEffect } from \"react\";\nimport Initialize from \"./scripts/Initialize\";\nvar _ = require(\"lodash\");\n\nconst [playerBoard, computerBoard, humanPlayer, computerPlayer] = Initialize();\n\nfunction Gameloop() {\n  useEffect(() => {\n    const [\n      playerBoard,\n      computerBoard,\n      humanPlayer,\n      computerPlayer,\n    ] = Initialize();\n  }, []);\n\n  const [gameInstructions, setGameInstructions] = useState(\n    \"Welcome to BattleShip! Start by placing your ships. \" +\n      \"You will have 5 ships to place, starting with a 6 unit \" +\n      \"Carrier to a 2 unit Destroyer. You can set the orientation \" +\n      \"with the Orientation toggle button\"\n  );\n\n  const [gameOver, setGameOver] = useState(false);\n\n  //Board states\n  const [playerBoardState, setPlayerBoardState] = useState(\n    playerBoard.getBoardSpaces()\n  );\n  const [computerBoardState, setComputerBoardState] = useState(\n    computerBoard.getBoardSpaces()\n  );\n\n  //Player Message States\n  const [playerMessage, setPlayerMessage] = useState(playerBoard.getMessage());\n  const [computerMessage, setComputerMessage] = useState(\n    computerBoard.getMessage()\n  );\n\n  const [userShipsLeftToPlace, setUserShipsLeftToPlace] = useState([\n    6,\n    5,\n    4,\n    3,\n    2,\n  ]);\n\n  const [orientation, setOrientation] = useState(\"Vertical\");\n\n  const userPlaceShips = (y, x) => {\n    if (\n      playerBoard.placeShips(userShipsLeftToPlace[0], orientation, y, x) ===\n      undefined\n    ) {\n      /* removes first of array so essentially after user place the 6 length Ship\n   it will automatically leave the 5 length ship to place on next click */\n\n      setUserShipsLeftToPlace(userShipsLeftToPlace.filter((x, i) => i !== 0));\n      setPlayerBoardState(_.cloneDeep(playerBoard.getBoardSpaces()));\n\n      //clear the current error message if there was one\n      setPlayerMessage(\"\");\n      if (userShipsLeftToPlace[0] === 2) {\n        setGameInstructions(\n          \"USA goes first! Choose locations on the enemy \" +\n            \"board to attack. First player to sink all 5 enemy ships wins glory \" +\n            \"to powerful nation and gains much valor!\"\n        );\n      }\n    } else setPlayerMessage(\"Glorious nation can't put ship there!\");\n  };\n\n  const toggleOrientation = () => {\n    if (orientation === \"Vertical\") {\n      setOrientation(\"Horizontal\");\n    } else setOrientation(\"Vertical\");\n  };\n\n  //main game loop is here. Updates player click and message and executes computer click\n  const handleClick = (y, x) => {\n    //check if user has placed all available ships\n    if (userShipsLeftToPlace[0] === undefined && gameOver === false) {\n      humanPlayer.attack(computerBoard, y, x);\n      //pass by reference wont update the state to rerender if we dont deep clone\n      const temp1 = _.cloneDeep(computerBoard.getBoardSpaces());\n      setComputerBoardState(temp1);\n      setComputerMessage(computerBoard.getMessage());\n      //pass by reference wont update the state to rerender if we dont deep clone\n\n      computerPlayer.attack(playerBoard);\n      const temp2 = _.cloneDeep(playerBoard.getBoardSpaces());\n      setPlayerBoardState(temp2);\n      setPlayerMessage(playerBoard.getMessage());\n      if (\n        computerBoard.getMessage() === \"Hit and Sunk! You've sunk all my ships!\"\n      ) {\n        setGameOver(true);\n        setGameInstructions(\n          \"Game over! Glory to all great nation of US and A!\"\n        );\n      }\n      if (\n        playerBoard.getMessage() === \"Hit and Sunk! You've sunk all my ships!\"\n      ) {\n        setGameOver(true);\n        setGameInstructions(\"Game over! Glory to all great nation of USSR!\");\n      }\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>BATTLESHIP</h1>\n      <div className=\"instructions\">{gameInstructions}</div>\n      <div className=\"gameboards-container\">\n        <div className=\"player-container\">\n          <GameboardComp\n            onClick={(y, x) => {\n              userPlaceShips(y, x);\n            }}\n            gameboard={playerBoardState}\n            name=\"USA\"\n            type=\"human\"\n          />\n          <div className=\"Message\">{playerMessage}</div>\n          {userShipsLeftToPlace[0] === undefined || (\n            <button onClick={toggleOrientation}>{orientation}</button>\n          )}\n        </div>\n        <div className=\"computer-container\">\n          <GameboardComp\n            onClick={(y, x) => handleClick(y, x)}\n            gameboard={computerBoardState}\n            name=\"USSR\"\n            type=\"computer\"\n          />\n          <div className=\"Message\">{computerMessage}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Gameloop;\n","/home/garyarzumanyan/Documents/Odin/battleship-game/src/scripts/Initialize.js",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"45","replacedBy":"49"},{"ruleId":"47","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":12,"column":7,"nodeType":"53","messageId":"54","endLine":12,"endColumn":18},{"ruleId":"51","severity":1,"message":"55","line":13,"column":7,"nodeType":"53","messageId":"54","endLine":13,"endColumn":20},{"ruleId":"51","severity":1,"message":"56","line":14,"column":7,"nodeType":"53","messageId":"54","endLine":14,"endColumn":18},{"ruleId":"51","severity":1,"message":"57","line":15,"column":7,"nodeType":"53","messageId":"54","endLine":15,"endColumn":21},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],["58"],["59"],"no-unused-vars","'playerBoard' is assigned a value but never used.","Identifier","unusedVar","'computerBoard' is assigned a value but never used.","'humanPlayer' is assigned a value but never used.","'computerPlayer' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]